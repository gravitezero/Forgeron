{
  // Arguments :
  // template, callback
  var binder            = require('./lib/binder.js').apply(null, Array.prototype.slice.call(arguments,2));
  
}

start
  = Tuples { return binder.end() }

Tuples
  = tuple:Tuple tuples:(EOL+ Tuples)? EOL* { }

Tuple
  = "template" Spaces? Assign_char Spaces? file_name:Text Spaces* { binder.template(file_name) }
  / tag:List_selector Spaces? Assign_char Spaces? content:List_content Spaces* { binder.fill(tag, content) }
  / tag:Selector Spaces? Assign_char Spaces? content:Content Spaces* { binder.fill(tag, content) }

Selector
  = selector:Word_sel {return selector}

List_selector
  = "{" selector:Word_sel "}" {return selector}

Content
  = text:(Text / Paragraph) {return text}

Key_value
  = key:Word Spaces* Assign_char Spaces* value:(Word_list Spaces*)+ ","? {return {key: key, value: value}}

Item 
  = (EOL Tab_char / Spaces)* chars:(Word_list)+ Spaces* ","? Spaces* { return chars.join('') }

List_content
  = items:Item+ {return items}

Text_line
  = chars:(Char / Spaces)+ { return chars.join('') }

Text
  = Text_line

Paragraph_line
  = eol:EOL? Tab_char text:Text? { return eol + text }

Paragraph
  = EOL+ lines:Paragraph_line+ { return lines.join('') }

Word
  = chars:Char+ Spaces* { return chars.join('') }

Word_sel
  = chars:Safe_characters+ { return chars.join('') }

Word_list
  = chars:List_characters+ spaces:Spaces* {return chars.join('') + spaces}

Spaces
  = spaces:" "+ { return spaces.join('') }

EOL
  = space:Spaces* eol:"\n"+ { return eol.join('') }

Safe_characters
  = [.#a-zA-Z0-9\[\]=^'"(),] //'

List_characters
  = [.#a-zA-Z0-9\[\]\{\}=^'"():] //'

Char
  = [.#a-zA-Z0-9\[\]\{\}\/=^'"(),:] //'

Assign_char
  = [:]

Tab_char
  = "  "